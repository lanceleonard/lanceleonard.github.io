[{"body":"When trying to push a commit using git from the command-line, you receive a GH007 remote error:\nremote: error: GH007: Your push would publish a private email address. Here, you’ve likely:\nConfigured your local copy of git to use the email address associated with your GitHub account Enabled the Keep my email addresses private option in your Github profile settings. The error is Github’s way of enforcing the privacy of your email address.\nTo fix things, you can:\nConfigure git to use your noreply email address (displayed in GitHub email settings) (Preferred) Deactivate email privacy (Not recommended) If you choose the former, you also need to reset the commit to use the noreply address.\nHere are the steps:\nUse Github email settings to determine your noreply address. (Consider coping it to the Clipboard.)\nUpdate email address in local config:\n$ git config --global user.email\nReset the commit\n$ git reset --soft HEAD ~1\nAdd, commit, and push your changes.\n$ git add . $ git commit -m \"My commit message\" $ git push The commit should now succeed.\nTo learn more:\nBlocking command line pushes (GitHub, reviewed 12 May 2024)\nSetting commit email address: (GitHub, reviewed 12 May 2024)\nVital statistics First post: 12 May 2024 Source: Based, in part, on Stack Overflow question #43378060 ","categories":"","description":"How to resolve GH007 remote errors related to private email addresses.","excerpt":"How to resolve GH007 remote errors related to private email addresses.","ref":"/tips/git/remote-privacy-errors/","tags":"","title":"Email privacy error"},{"body":"Hugo is a static site generator that creates websites from Markdown. It’s typically used to create documentation sites (like this one).\nHere, I collect relevant links, tips, and tricks.\nServe local site To preview local changes:\n$ hugo serve By default, Hugo publishes your preview to http://localhost:1313 .\nYou can also use command-line options to customize Hugo’s behavior.\nFor example:\n$ hugo serve --disableFastRender --ignoreCache --logLevel warn These options tell Hugo to fully rebuild the entire site when updating the local preview and to display more error messages.\nTo learn more, use Hugo’s built-in help:\n$ hugo -help Hide content There are times when you’ll want to hide content from from different views.\nFor example, an article might:\nBe in progress and not quite ready for public consumption Have to wait for another article Serve as a bridging element without having public content Here are different ways to hide content.\nHide article content Use HTML comments to hide content within an article.\n## Section 1 \u003c!-- ## Section 2 in progress --\u003e ## Section 3 This keeps the content from rendering on the published webpage; however, it’s still published in the source.\nUse care when working with sensitive content.\nSet draft mode Use draft mode to keep articles private.\nDo this in the article’s front matter:\n--- title: \"My article title\" description: \"My article description\" draft: true --- If a doc appears in the table of contents (TOC) after setting this option, verify that you’ve set the value as shown.\nTo list articles currently in draft mode:\n$ hugo list drafts For details, see the Hugo reference page.\nExclude from contents To exclude an article from the navigation menu displayed along the left side of the page, hide it from the table of contents (toc):\n--- title: \"My article title\" description: \"My article description\" toc_hide: true --- Hide summary By default, article descriptions appear in index pages as article summaries.\nYou can hide descriptions from the index page by updating the article’s front matter:\n--- title: \"My article title\" description: \"My article description\" hide_summary: true --- Vital statistics First post: 8 May 2024 ","categories":"","description":"Tips and tricks for Hugo, a static site generator.","excerpt":"Tips and tricks for Hugo, a static site generator.","ref":"/tips/doc/tools/hugo/","tags":"","title":"Hugo"},{"body":"Markdown is a lightweight markup language used to create websites and other publications. Based on text, it’s an easy way to format content.\nThere are multiple “flavors” of Markdown, including:\nCommonMark Github-Flavored Markdow (GFM) kramdown Markown Extra MultiMarkdown R Markdown and more…. Each flavor adds to the basic Markdown capabilities. [MarkdownGuide] provides a reference to the most common Markdown extensions.\nIn addition, there are multiple Markdown parsers, also called processors, that each vary slightly in the features they support and how they suppot them.\nWhen working with Markdown, take time to learn the flavor and parser that you’re using. Doing so can only help you in the long run.\nHere are some useful tools and resources.\nTables Basics Tables require at least three lines:\n| Name | Description | |-------|---------------| | Row 1 | Explanation 1 | | Row 2 | Explanation 2 | | Row 3 | Explanation 3 | Which leads to:\nName Description Row 1 Explanation 1 Row 2 Explanation 2 Row 3 Explanation 3 Notes:\nIt’s not strictly necessary (or always practical) to align each column in the source. It’s easier to read (and therefore to maintain), but it’s not necessary.\nIn the separator line, columns must be define using at least three hyphens (---).\nColumn alignment | Left | Center | Right | |---------|:-------:|--------:| | `:---` | `:---:` | `---:` | | Alpha | Apple | Alpha | | Beta | Banana | Bravo | | Gamma | Cherry | Charlie | Leads to:\nLeft Center Right :--- :---: ---: Alpha Apple Alpha Beta Banana Bravo Gamma Cherry Charlie Syntax reference Markdown basic syntax reference (Markdown Guide) Github Markdown reference: A more complete reference focused on CommonMark/GFM Converting Markdown GD2md-html is a Chrome extension that converts Google docs to Markdown.\nPandoc bills itself as your Swiss Army for converting docs from one format to another.\nWritage is a Microsoft Word addon that converts DOC files to Markdown. Available for Mac and Windows.\n","categories":"","description":"Markdown is a text-based markup language used for docs and other publications.","excerpt":"Markdown is a text-based markup language used for docs and other …","ref":"/tips/doc/tools/markdown/","tags":"","title":"Markdown"},{"body":"MKDocs is a static-site generator that converts Markdown source files into fully formed websites.\nCheck version Use --version to display the current MkDocs version:\n$ mkdocs --version Hide footer ad Early versions of MkDocs include a small “ad” in the footer of your webpages (“Documentation built wwith MKDocs”).\nYou can hide this by adding a CSS rule to hide the message or by removing it from your site’s template.\nHide with CSS To hide the ad using CSS:\nIn your project’s /docs/ folder, add the following rule to a custom style sheet:\nfooter :last-child { display: none; } Verify that your custom style sheet is declared in your site’s project configuration (mydocs.yml)\nsite_name: My example site exta_css: - hidefooter.css Here, we assume your custom CSS file is named hidefooter.css.\nIf you’re working with an earlier version of MKDocs, you may need to tweak the CSS rule. In version v0.15.x, for example, MKDocs placed its ad in a \u003ccenter\u003e element (now deprecated).\nTo hide the footer in this version:\ncenter { display: none; } Update template You can also update the template to remove the ad entirely:\nInstall a copy of the basic theme into a your project.\nUpdate mkdocs.yml to refer to your new theme:\ntheme_dir: \u003ccustom-template\u003e Update base.html to remove the “Built with” line (line 189 as of this writing).\nSave, build, and deploy as usual.\nCustomize templates MKDocs uses Jinja2 as its templating engine. To learn more, see:\nMkDocs: “Developing themes Jinja2 docs Vital statistics 8 May 2024: Rewritten and updated for site revamp 15 March 2017: First post ","categories":"","description":"Tips and tricks for MKDocs, a static site generator.","excerpt":"Tips and tricks for MKDocs, a static site generator.","ref":"/tips/doc/tools/mkdocs/","tags":"","title":"MKDocs"},{"body":"Style guides define rules for using language in a given context.\nThese rules provide a “common voice” that customers recognize and expect when working with professional content.\nA good style guide improves your writing and overall effectiveness.\nRecommended guides For technical docs, consider adopting one of the following:\nGoogle developer doc style guide Microsoft Writing Style Guide Each guide was developed by the publisher using research and customer focus groups. Each is actively tested, reviewed, and maintained by their respective organizations.\nAdopting either guide helps you create better docs.\nFor best results, adopt one as your primary resource and use others as supplements. This leads to more informed editorial decisions, especially when trying to decide whether it’s time break the rules.\nOther style guides Other guides exist, including:\nApple Style Guide Red Hat Technical Writing Style Guide Salesforce Style Guide for Documentation and User Interface Text This discussion focuses mainly on editorial style guides. Other guide include:\nDesign style guides, also known as visual style guides, which guide user interface design and the use of visual controls.\nExamples include:\nGoogle Material Design guidelines Apple Human Interface Guidelines Branding style guides, which companies use to present consistent messages to consumers and to protect their branding, trade dress, and trademarks.\nProject style guides define “house rules” for projects and organizations.\nThese generally describe exceptions to outer resources and generally occur in response to specific decisions.\nIf you’re new to a team, consider asking whether there is a project style guide–even when familiar with the primary style guide.\nMore editorial resources When your style guide doesn’t answer a particular question, consider these resources:\nMerriam-Webster (modern spelling, usage, and thesaurus) Oxford English Dictionary (legacy language, archaic terms, and alternate uses) The Chicago Manual of Style (book or subscription) The Elements of Style, by William Strunk \u0026 E.B. White (Fourth edition available at Internet Archive) Purdue University Online Writing Lab (OWL) National Archives (NARA) Principles of Clear Writing Historical guidelines Modern technical writing style is based on plain language, a set of guidelines originally developed for the Plain Writing Act of 2010.\nThese guidelines emphasize brief, clear docs with direct language. See Voice \u0026 tone to learn more.\nEarlier approaches include:\nSimplified Technical English (STE), a set of standards originating in the aerospace industry during the 1980s.\nSTE was designed to reduce confusion, especially among readers who did not understand English as a native language.\nMany guidelines assumed that technology would never be able to accurately translate content in real time.\nAs a result, content written to STE guidelines can seem formal, stiff, and stilted.\nMicrosoft Manual of Style (MMOS)\nBased in part on STE, the MMOS was considered a primary resource for technical publications at Microsoft for more than two decades.\nEarly versions were called the Microsoft Manual of Style for Technical Publications (MSTP).\nBecause Microsoft was one of a few companies that invested early in technical writing standards, MTPS became a core resource for other companies.\nSuperseded by the Microsoft Writing Style Guide.\nVital statistics 12 May 2024: Updated and reworked for current standards 15 June 2017: Updated and expanded First post: 29 Jan 2017 ","categories":"","description":"Defines \"style guide\" as a term and provides recommendations.","excerpt":"Defines \"style guide\" as a term and provides recommendations.","ref":"/tips/doc/style-guides/","tags":"","title":"Style guides"},{"body":"Git for Windows includes a tool called Git Bash, which gives you a bash shell you can use to run git via the command line.\nTo set the Git Bash default directory, change the Start in field on the Shortcut tab of the Git Bash properties.\nHere’s how:\nRight-click the Git Bash icon in the taskbar to display the taskbar shortcut menu.\nRight-click the Git Bash command in the taskbar shortcut menu and then select Properties.\nIf the Target field includes the -cd-to-home option, remove it.\nSet Start in to the directory you wish to use.\nUse the Windows cmd path naming convention, instead of Unix.\nFor example: c:\\mypath\\myrepos instead of /c/mypath/myrepos.\nWhen finished, select OK or press Enter.\nIf necessary, exit and restart Git Bash.\nVital statistics 7 May 2024: Rewritten and updated for site revamp 2 June 2018: First post ","categories":"","description":"How to change the default directory for Git Bash","excerpt":"How to change the default directory for Git Bash","ref":"/tips/git/git-bash-default-path/","tags":"","title":"Set Git Bash default path"},{"body":"By default, the JavaScript Array.sort() function sorts arrays according to character placement within a character set. For most web content, this is UTF-8.\nHowever, this may not always be an ideal result.\nHere, we show how to define a custom sort order in JavaScript.\nProcess array To illustrate, consider the following book titles, organized roughly by the year they were first published.\nA Study in Scarlet The Sign of Four The Adventures of Sherlock Holmes The Memoirs of Sherlock Holmes The Hound of the Baskervilles The Return of Sherlock Holmes His Last Bow The Valley of Fear The Case-Book of Sherlock Holmes To print an array containing these titles to a web page, you might use something like this:\nvar iTotal = astrTitles.length; if ( iTotal \u003e 0 ) { for ( var iTitles = 0; iTitles \u003c iTotal; iTitles++ ) { var str = astrTitles[ iTitles ]; writeTitle( str ); } } Here, the writeTitle() function represents the code needed to display the title on the target device.\nfunction writeTitle( strTitle ) { var obj = document.getElementById( \"pOutput\" ); obj.textContent += strTitle + \"\\n\"; } Example 1: A JavaScript function to write string values to a webpage. (Try it out)\nSort an array When asked to sort the array alphabetically, you might call the Array.sort() function:\nvar iTotal = astrTitles.length; if ( iTotal \u003e 0 ) { astrTitles.sort(); for ( var iTitles = 0, iTitles++, iTitles \u003c iTotal ) { writeTitle( astrTitles[ iTitles ] ); } } Example 2: JavaScript code to sort an array before process it. (Try it out)\nWhen run, this leads to the following:\nA Study in Scarlet His Last Bow The Adventures of Sherlock Holmes The Case-Book of Sherlock Holmes The Hound of the Baskervilles The Memoirs of Sherlock Holmes The Return of Sherlock Holmes The Sign of Four The Valley of Fear From a technical view, these might be the results you expect; however, your users might have different ideas.\nMove leading articles As an alternative, consider:\nAdventures of Sherlock Holmes, The Case-Book of Sherlock Holmes, The His Last Bow Hound of the Baskervilles, The Memoirs of Sherlock Holmes, The Return of Sherlock Holmes, The Sign of Four, The Study in Scarlet, A Valley of Fear, The Here, leading articles (a, an, and the) are moved to the end of the title. To some, these results are clearer and more logical.\nThis strategy is common to business filing systems and known by different names, including dictionary sorting and alphabetic collation.\nFor a detailed look, see Section 4.6 (PDF) of “Guidelines for Alphabetical Arrangement of Letters and Sorting of Numerals and Other Symbols”, by Hans H. Wellisch, 1999 National Information Standards Organization (NISO) Technical Report TR02-1999.\nTo create a custom function that does this in JavaScript, you might use something along these lines:\nfunction moveLeadingArticle( sInput ) { var sResult = sInput.toLocaleLowerCase(); var aArticles = [ 'a', 'an', 'the' ]; var aWords = sResult.split(/\\s/); if ( aArticles.indexOf( aWords[0] ) \u003e -1 ) { sResult = aWords.slice( 1 ).join( ' ' ); sResult += ', ' + aWords[0]; } return sResult; } Example 3: A custom function to move leading titles to the end of an input string. (Try it out)\nHere, the input parameter value is:\nConverted to lowercase. Split into individual words. The first word is compared to a list of known articles (a, an , the). When a title starts with an article, the article is moved to the end of the title. Here are a couple of examples:\nmoveLeadingArticle( \"His Last Bow\" ) returns his last bow\nmoveLeadingArticle( \"The Sign of Four\" ) returns sign of four, the\nCustom sort order You can create a custom sort order by passing an anonymous function to the Array.sort() function.\nvar iTotal = astrTitles.length; if ( iTotal \u003e 0 ) { if ( aResultsArray.length \u003e 1 ) { aResultsArray.sort( function( a, b ) { var SortTermA = moveLeadingArticle( a ); var SortTermB = moveLeadingArticle( b ); return SortTermA.localeCompare( SortTermB ); } ); } Example 4: Performing a custom sort using an anonymous function. (Try it out)\nHere, the anonymous function calls the custom function when comparing string values. When run, these titles are sorted in dictionary order (shown earlier).\nExample #3 shows this in action.\nInternational concerns This example essentially demonstrates how to perform a custom sort using JavaScript.\nUnfortunately, the actual algorithm relies on a specific behavior used to sort titles written in English using Latin characters. It might be useful for book lists, music collections, or even video games involving extensive player inventory systems.\nBeyond these cases, the example might have limited value. It doesn’t account for alternate alphabets, collation patterns, or even languages that do not support articles.\nThe Intl.collator() object is typically suggested as a good resource for international concerns. (Unfortunately, few options seem to support this specific scenario for English.)\nInternationalization (I18N) is the art of writing apps to support users and their native assumptions.\nTo learn more, see:\nHandling character encodings in HTML and CSS (W3C) International Components for Unicode (ICU) The Unicode Common Local Data Repository (CLDR) Vital statistics Updated: 8 May 2024 - Rewritten to align to current style guidelines, support the site revamp, and discuss the I18N perspective. First post: 26 January 2017 ","categories":"","description":"Shows how create a custom sort order in JavaScript","excerpt":"Shows how create a custom sort order in JavaScript","ref":"/tips/javascript/dictionary-sorting/","tags":"","title":"Dictionary sorting in JavaScript"},{"body":"Windows uses privilege elevation prompts (also known as user account controls or UACs) to confirm administrative actions, such as installing new software, deleting files from sensitive locations, and so on.\nElevation prompt behavior has changed since the original Window Vista introduction, however, the experience can be jarring, especially if you routinely switch between devices running different versions of Windows.\nA few keyboard shortcuts have remained consistent through multiple versions of Windows, including:\nTo quickly accept an elevation prompt, press Left arrow and then press `Enter. To cancel a prompt, press Esc (the escape key). In many (though not all) versions of Windows, you can use Spacebar to select the default button in an elevation prompt. In my experience, the first shortcut is the most widely supported. There’s no guarantee that will continue in future Windows releases.\nHistorical perspective Many find elevation prompts to be annoying. Oddly, this was the original intention.\nWhile I personally appreciate the opportunity to avoid accidentally deleting an important file, I know this isn’t a universal view.\nMore info User account control: How it works (Microsoft Learn)\n“User Access Control in a nutshell”, by Roger Grimes, CSO Magazine, 1 Apr 2008.\n“Protect your Windows network from excessive administrator rights”, Susan Bradley, CSO Magazine, 15 Jul 2020.\nVital statistics Updated 06 May 2024: Rewrote to reflect current style and layout. 27 Jan 2017: Original post ","categories":"","description":"Describes how to use the keyboard to manage Windows elevation prompts.","excerpt":"Describes how to use the keyboard to manage Windows elevation prompts.","ref":"/tips/windows/elevation-prompt-shortcuts/","tags":"","title":"Keyboard shortcuts for elevation prompts"},{"body":"An uncommon bit of website maintenance involves reviewing or updating links on a webpage.\nTypically, you want a list of the URLs specified in anchor elements (\u003ca href=\"...\"\u003e\u003c/a\u003e).\nThis means you want a list of the URLs specified in the HREF attribute of anchors.\nLike many tasks, this can be more complicated than it first appears.\nList webpage links Use the Document.links property to get a list of the links on a webpage.\nDocument.links returns an HTMLCollection object, which is a list of Element objects.\nThis list include anchor elements, but it can also include other things, such as SVG images, MathML objects, and more.\nNot element has an HREF attribute. For best results, make sure the attribute exists before trying to read its value.\nHere’s one way to do this:\nlet aryLinks = document.links; for (const key in aryLinks ) { let obj = aryLinks[key]; if (typeof obj === 'object' \u0026\u0026 obj != null \u0026\u0026 'getAttribute' in obj) { console.log(obj.getAttribute(\"href\")); } }; Example #1: JavaScript code to list a webpage’s links to the browser console.\nSort and remove duplicates To try this out, use the Copy to Clipboard button and then paste it into the Console tab of your browser developer tools.\nAs you review the results, you might notice a few things:\nThere are a lot of links\nThey’re ordered by appearance in the page structure\nThere are duplicates\nWhile there are good reasons behind these observations, you might want to sort the list and remove duplicates.\nHere’s one way to do this:\nlet aryLinks = document.links; let aryURLs = new Array(); for (const key in aryLinks ) { let obj = aryLinks[key]; if (typeof obj === 'object' \u0026\u0026 obj != null \u0026\u0026 'getAttribute' in obj) { const sURL = obj.getAttribute(\"href\"); if ( aryURLs.indexOf( sURL) == -1 ) { aryURLs.push( sURL ); } } }; for (const item in aryURLs.sort()) { console.log( aryURLs[ item ] ); } Example #2: Extracting links, and listing unique URLs as sorted results.\nInstead of directly logging the target URL, this version add a second step.\nIt uses a second array to collect unique ULRs and then sorts the results before printing them to the console.\nVital statistics 10 May 2024: First post, based on private notes. ","categories":"","description":"How to use JavaScript to list and sort links on a webpage.","excerpt":"How to use JavaScript to list and sort links on a webpage.","ref":"/tips/javascript/extract-webpage-links/","tags":"","title":"Extract links from a webpage"},{"body":"Once established, git workflows go fairly smoothly.\nAt some point, you might realize that a branch pull request (PR) includes commits that it shouldn’t.\nAlternatively, your local default branch (main or master for older projects) has somehow managed to get ahead of the remote origin.\nTo fix things, you need to:\nReplace the broken branch Replace the broken pull request Replace broken branch For the most part, you can’t selectively remove commits from a pull request.\nInstead you need to replace the broken branch with a new one.\nTo do so:\nReview the commits in the broken PR Determine (and save) the commit IDs for the changes you want to keep Create a new branch and then add the selected commits in your new branch Discard the original branch Here’s how it works:\nDetermine and save the IDs for the commits you want to keep:\n$ git checkout broken-branch $ git log If you’re lucky, you just need the first commit ID displayed in the log.\nCreate and check out a new branch\n$ git checkout broken-branch-update $ git log Tip: Consider linking the branch names. Here, I’ve added update to the previous branch name so that a future reviewer might recognize the connection between the branches. Such consistency can help when looking back weeks or months later.\nReset the new branch to a known baseline, such as your remote default branch (origin/main).\n$ git fetch origin main $ git reset --hard origin/main If you receive an error saying Fatal: could not read from remote repository, it’s likely one of the following:\nYou’ve mistyped origin: verify the name of your upstream remote and try again. Your current working directory isn’t (yet) part of your remote branch. Change to a shared directory and try again. Your session credentials have expired; renew your session and try again. Add the desired commits from the original branch:\n$ git cherry-pick saved-commit-id Run this for each saved commit ID.\nReview your local files and commit your changes.\nWhen satisfied, push your new branch:\n$ git push origin broken-branch-upd:broken-branch-upd To finish: create a new pull request (which should be blissfully free from other commits), delete the original (broken) PR, and then clean up your local branches.\nBefore adding additional commits to your new PR, consider pushing a small edit within the scope of the PR. If this triggers an upstream warning that “changes aren’t tracked remotely,” use the text in the error to set up remote tracking.\n$ git push --set-upstream origin broken-branch-upd Consider doing this now to avoid future surprises.\nReset local default Once you’ve replaced broken branches and pull requests, you will likely need to reset your local default branch (main) to your remote default (origin/main).\nTo begin, check out main, investigate the differences between your local copy and your upstream remote, and then resolve any differences. (Most have likely been resolved while replacing broken ranches.)\nWhen things look good, reset your local default (main) to your remote default (origin/main):\n$ git checkout main $ git fetch origin main $ git reset --hard origin/main $ git status On branch main Your branch is up to date with 'origin/main'. nothing to commit, working tree clean Once the working tree is clean, you’re ready to resume your normal activities.\nVital statistics Update\n7 May 2024 - Rewritten to reflect current style and conventions Tested\n8 March 2017 using git 2.10.1, MacOS Sierra 10.12.3 Source material Based on Stack Overflow Question #25955822.\n(My mileage varied, so I wrote this and added my comments.) ","categories":"","description":"Shows how to clean up branches after mistakes happen.","excerpt":"Shows how to clean up branches after mistakes happen.","ref":"/tips/git/fix-default-branch-mistake/","tags":"","title":"Fix broken branches and main mistakes"},{"body":"Tenets are guiding project principles; they outline and frame design thinking.\nI use tenets for nearly all projects I work on. (I don’t always tell people about them.)\nHere are the ones I generally start with. Unless you can think of better ones…\nDocs are features Many teams treat docs as afterthoughts. Like good software, good docs require design, forethought, and planning.\nEffective docs follow the product lifecycle: design, implementation, review, and maintenance.\nTreat doc reviews as seriously as code reviews. Reviewers need to be proactive and timely in their feedback.\nFeedback must be specific, clear, and actionable.\nDocs solve problems Good docs help people solve problems.\nBefore starting an article, identify the audience and the problem.\nThis defines the intent:\n“As a developer, I want to back up my database.”\n“As a new customer, I want to update my profile.”\n“As an admin, I need to limit access.”\nLike feedback, intent must be specific, clear, and actionable.\nThe article’s complete when it meets the intent. Everything else is extra (and probably goes elsewhere).\nWhen you review an article, test it against the intent.\nSolve first; explain later Most people are in a hurry; they’re trying to answer a specific question.\nGive them the answer. Let them decide what to do next.\nDetails, analysis, and architecture come later.\nWhen planning docs, remember “Breadth, then depth.”\nWork priorities in descending order. Finish what you can with what you have.\nCover basics first and then go deeper. Balance resources, priorities, and feedback.\nWhen you do focus on specifics, start with things relevant to many users, rather than a few.\nWrite for modern audience We have short attention spans and too many distractions. We tend to scan for relevance before diving deep. (Think tl;dr for, well, everything.)\nThis means:\nDesign for scanning. Use simple sentences, short paragraphs, and lots of whitespace.\nBe brief. Be clear. Save details for later.\nUse everyday language rather than industry jargon.\nIf you must use jargon, define it–especially TLAs (three-letter acronyms) and abbrs (abbreviations).\nDon’t assume readers have the same context or background knowledge.\nShow empathy: be direct when things are not ideal. At the very least, don’t be a jerk.\nDocs cannot teach everything Docs help people learn the basics and become self-sufficient.\nIt’s tempting to document every behavior and error condition. Yet, too much detail can overwhelm.\nConsider practical limits and diminishing returns.\nThe more you write, the more you have to maintain.\nStart with the 80/20 rule. Let feedback and metrics inform updates.\nPublish, then perfect Unpublished docs help no one.\nDocs don’t need to be perfect to publish. You can always push an update.\nFigure out what you can do with what you have. Do it and then iterate.\nMistakes are OK. Accept, learn, and move on.\nIt’s OK to focus You don’t have to accept (or use) every good idea.\nAccept feedback and contributions openly; use those that serve the intent.\nIf something doesn’t fit, throw it in the backlog and file a follow-up ticket.\nActively maintain, review, and triage your backlog. Make time for quality sprints.\nLog and prioritize all requests. Work date-sensitive items in descending priority order.\nMore about tenets Tenets are part of the Amazon design process. They answer questions that aren’t otherwise addressed by your project docs.\nAt Amazon, every project is expected to feature tenets prominently. (Some projects post tenets publically.)\nBy tradition, you introduce tenets with the subtitle “Unless you can think of better ones.”\nTenets can and do change as projects evolve. This is encouraged.\nI use tenets to frame and clarify. They help:\nSet expectations Outline direction Enable conversation I bring these tenets to every project I work on. Unless you can think of better ones…\n","categories":"","description":"Guiding principles for doc projects","excerpt":"Guiding principles for doc projects","ref":"/tips/doc/tenets/","tags":"","title":"Doc project tenets"},{"body":"Docs, to some degree, represent the voice of your organization. Readers respond well to a friendly tone that is easy-to-read.\nThese principles help.\nUse one clear intent Good docs help users solve problems.\nBefore working on a doc, understand the audience you’re trying to reach and the problem being solved.\nThis is called the intent and is typically expressed as as follows:\n“As a \u003crole\u003e, I want to \u003csolve a problem\u003e.\nExamples:\n“As a developer, I want to back up my database.” “As a novice, I want to create a doc website.” “As a new writer, I want to check the readability of my content.” Good intents helps:\nWriters organize content and know when to stop. Reviewers know the limits and scope of the article. If you’re having trouble outlining an article, take time to consider the intent carefully.\nBe brief Modern readers are in a hurry.\nThey’re not reading your content for entertainment; they’re trying to solve problems.\nDesign accordingly:\nBe direct and concise.\nWrite simple sentences and minimize discussion.\nWrite the simple case first; discuss complications later.\nThe acronym tl;dr is a useful guidepost.\nBe scannable Few people read for depth initially.\nInstead, they scan webpages and try to pick out relevant details before diving deeper.\nStructure your docs accordingly:\nUse short sentences, small paragraphs, and lots of white space.\nMinimize distractions and limit decorations (rules, frames, and blocks of color).\nAvoid distractions, such as elements that move (animated images, autoplay videos, and so on.)\nMove complicated or detailed discussions below summarized answers.\nUse everyday language Many industries have terms and language specific to their domains.\nDon’t assume that your readers know these terms or search on them.\nAs an example, consider the following terms:\nfinetune headunit ingest inference upsert Can you define them clearly? Can your readers? How about people who aren’t already using your product or service?\nInstead, use plain language; define industry terms and jargon.\nShow empathy Some things are hard or complicated. Be up front about it.\nAt the very least, don’t be a jerk.\nDon’t describe something as quick or easy when it’s neither.\nRemove marketing hype and hyperbole.\nFocus on objective, reproducible facts.\nWe’re all learning. Be gentle.\nVital statistics 10 May 2024: First post for this website ","categories":"","description":"Principles for create clear, readable docs.","excerpt":"Principles for create clear, readable docs.","ref":"/tips/doc/voice-tone-principles/","tags":"","title":"Voice \u0026 tone principles"},{"body":"Here are some tools, resources, and guidelines for creating docs.\n","categories":"","description":"Practical guidelines and help with related tools.","excerpt":"Practical guidelines and help with related tools.","ref":"/tips/doc/","tags":"","title":"Doc guidelines, standards, and tools"},{"body":"Occasionally, I’m asked I’m a particular Lance Leonard.\nI’ll admit to being a Lance Leonard, but perhaps not the Lance Leonard you’re looking for. (“Haven’t you heard? I come in six-packs.”)\nFor example, I am not:\nA conservative politician from New Jersey. (You’ve likely reversed the names, not to mention the, well, never mind. It’s not that sort of site.)\nFormerly of any confection or beverage companies; the email addresses are close, but different. Please look again.\nAnd, since the subject’s been broached… Dude. It’s embarrassing to receive someone else’s private correspondence—especially correspondence that really should remain, well, private.\nThe senior executives of my acquaintance usually know someone who can help them obtain unique digital identities. Has your mileage varied? ‘Nuff said?\nIn the insurance game. Nope; I’m a technical guy…a geek through and through. And I’ve got the funny-shaped dice to prove it.\nDead…at least not yet. That may change at some point and I cannot guarantee that I’ll be able to update the site accordingly.\nYou’ve been warned.\nI suppose I should admit that I’ve:\nBeen to New Jersey (Still miss footlongs on the waterfront) Lived in California (Santa Cruz, if you must know) Done project work for a notable beverage company Worked for a life insurance/investment company Played dead on stage But those are all meaningless coincidences typical in a life of adventure. None of them mean I’m the guy you’re looking for. Nope. Nuh-uh. I didn’t do it. No one saw me do it. Can’t prove a thing. Pay no attention to the geek behind the content. You can go about your business. Move along. Move along.\nOh, one last thing… Even if I might be the guy you think you’re looking for, I very probably can’t help you locate the person you lost track of way back when.\nLife is frequently weird. The once-possible sometimes becomes the opportunity-missed, the forever-broken, the legally-constrained, the ethically-restrained, and so on.\nAs certain a Formican once noted repetitiously, “Change happens.” Roll with it.\nMore plainly: If I say I cannot help you, I probably can’t…and I may not be in a position to explain why. Please respect that.\nAnd, yes, my sense of humor has been influenced by Douglas Adams, Charles Addams, Harlan Ellison, Monty Python, Leslie Charteris, Neil Gaiman, Terry Prachett, Piers Anthony, and more. Why do you ask?\n","categories":"","description":"Assorted things you should know about me and my sense of humor.","excerpt":"Assorted things you should know about me and my sense of humor.","ref":"/about/fair-warnings/","tags":"","title":"Fair warnings"},{"body":"","categories":"","description":"Covers git-based version control, including GitHub and related concepts.","excerpt":"Covers git-based version control, including GitHub and related …","ref":"/tips/git/","tags":"","title":"Git, GitHub, \u0026 related"},{"body":"Web browers Helpful tools Resources and references for HTML and CSS:\nWorld Wide Web Consortium (W3C, also W3): Home of the standards that describe how things are supposed to work, including: HTML, CSS, Web accessibility, and more.\nMozilla developer docs: Practical (and ad-free) references to HTML, CSS, and related topics, including useful details such as browser compatibility charts, links to defining specifications, and more.\nCan I Use…?: Extensive and detailed reference to feature availability across various browsers. Describes issues and frequently includes workarounds.\nDeveloper tools Many web browsers provide developer tools to help investigate and troubleshoot websites.\nApple Safari (included with MacOS) Hidden by default; Use Settings to change Use Safari Develop menu to open desired tool Brave Browser To open: Menu \u003e More Tools \u003e Web Developer Tools Keyboard: Mac: Opt + Cmd + I, Windows: Ctrl+Shift+I Google Chrome To open: Menu \u003e More Tools \u003e Developer Tools Keyboard: Mac: Opt + Cmd + I, Windows: Ctrl+Shift+I Microsoft Edge| To open: Menu \u003e More Tools \u003e Developer Tools Keyboard: Mac: Opt + Cmd + I, Windows: Ctrl+Shift+I Mozilla Firefox To open: Menu \u003e More Tools \u003e Developer Tools Keyboard: Mac: Opt + Cmd + I, Windows: Ctrl+Shift+I ","categories":"","description":"Content related to websites, including HTML, CSS, design, troubleshooting, and more","excerpt":"Content related to websites, including HTML, CSS, design, …","ref":"/tips/web/","tags":"","title":"HTML, CSS, and more."},{"body":"","categories":"","description":"","excerpt":"","ref":"/scribbles/journal/","tags":"","title":"Journal"},{"body":"This section covers Node.js, npm, and more.\nNode.js JavaScript, when used to support a webpage, runs in your browser and is considered a client-side language.\nIn contrast, Node.js runs on a server, which lets you use JavaScript for admin tasks and other operations.\nMore content coming soon.\n","categories":"","description":"","excerpt":"This section covers Node.js, npm, and more.\nNode.js JavaScript, when …","ref":"/tips/javascript/nodejs/","tags":"","title":"Node.js, npm, and more"},{"body":"I don’t track you or how you use the site.\nI don’t record any personally identifying information (PII).\nNo cookies are saved to your device, so there’s nothing to opt in to.\nAt some point, I may add analytics to help understand how people (in general) use the site. When I do that, I’ll update things accordingly.\nIf I learn you stopped by, I’ll keep that to myself.\nSince I’m not tracking anything, there’s nothing to share, sell, delete, or otherwise abuse.\nThat’s my policy and I’m sticking to it.\n","categories":"","description":"My privacy policy (such as it is).","excerpt":"My privacy policy (such as it is).","ref":"/about/privacy-policy/","tags":"","title":"Privacy policy"},{"body":" A paradox?\nA paradox, A most ingenious paradox!\nWe’ve quips and quibbles heard in flocks!\nBut none to beat this paradox!\n– Ruth \u0026 Frederic, “The Pirates of Penzance”,\nAct II (Scene 19), by W.S. Gilbert \u0026 Arthur Sullivan, 1879\nThe site’s name is based, in part, on lyrics from The Pirates of Penzance. (It’s also a subtle nod to one of my earliest documentation roles and, yes, there’s a small story or few.)\nOne can also argue that it’s a malapropism because quips are meant to humorously infer tips and quibbles lead to scribbles.\nYou can argue whatever you like, but I should probably point out that wordplay is an essential part of my sense of humor. (I’ve been told I play with words the way my cats play with strings.)\n","categories":"","description":"A bit about the name of the site.","excerpt":"A bit about the name of the site.","ref":"/about/site-name/","tags":"","title":"The site name"},{"body":"","categories":"","description":"","excerpt":"","ref":"/scribbles/thoughts/","tags":"","title":"Random thoughts"},{"body":"Tips answer questions I’ve had while learning or using various bits of technology.\nThey’re organized into categories that make sense to me.\n","categories":"","description":"","excerpt":"Tips answer questions I’ve had while learning or using various bits of …","ref":"/tips/","tags":"","title":"Tips"},{"body":"When working with multiple monitors, it’s possible for open windows to be left offscreen.\nI’ve see this happen when:\nTraveling with a laptop normally hooked up to external monitors when docked at home.\nUsing a KVM switch to share a monitor between different machines.\nMost of the time, windows adjust to the new display area. Every so often, however, one remains in its original position. It’s open and responds to input. Because it’s offscreen, you can’t see what’s going on.\nTo bring the window into view, select Move from the window’s system menu and then use the keyboard arrow keys.\nKeyboard shortcuts To open the system menu using the keyboard:\nActivate the window using Alt+Tab or by selecting it through the Taskbar.\nPress Alt+Spacebar (to open the system menu), press M (to select the Move command), and then use the arrow keys to move the window into the display area.\nIt’s a bit clumsy, but it does work.\nWindows taskbar If you’re using Windows 10 (or later), you can use the taskbar to open a window’s system menu:\nPress and hold the Shift key Right-click the taskbar icon for the window you want to move. Select Move from the menu and then use the arrow keys. Vital statistics Updated: 7 May 2024 - Reworked and refactored for website revamp. Last tested: September 2018 - Windows 10 Enterprise, version 1809. ","categories":"","description":"Describes how to bring an offscreen window into view.","excerpt":"Describes how to bring an offscreen window into view.","ref":"/tips/windows/recover-offscreen-window/","tags":"","title":"Recover offscreen window"},{"body":"This section collects tidbits related to JavaScript, Node.js, and related topics\n","categories":"","description":"Tips for JavaScript, Node.js, and related.","excerpt":"Tips for JavaScript, Node.js, and related.","ref":"/tips/javascript/","tags":"","title":"JavaScript, Node.js, and related"},{"body":"Here’s what I have for Apple Macintosh operating systems, aka Mac, MacOS, OS/X, and so on.\nSafari Enable developer tools Safari Developer tools are hidden by default.\nTo show them:\nStart Safari and then use the menu to select Safari \u003e Settings.\nFrom the Advanced tab of the Settings dialog, place a checkmark next to Show features for web developers\nWhen you do this:\na Develop tab appears in the Settings dialog a Develop menu appears in the app menu The Developer tools can help troubleshoot website issues.\nTo open the Console, for example, use the Safari menu to select Develop \u003e Show JavaScript Console.\nVital statistics 9 May 2024: First post ","categories":"","description":"Apple Macintosh operating systems are covered here.","excerpt":"Apple Macintosh operating systems are covered here.","ref":"/tips/mac/","tags":"","title":"Mac, MacOS, and OS/X"},{"body":"Here, you’ll find tips and tricks for specific doc tools.\n","categories":"","description":"Tips and tricks for tools used to generate doc websites.","excerpt":"Tips and tricks for tools used to generate doc websites.","ref":"/tips/doc/tools/","tags":"","title":"Documentation tools"},{"body":"","categories":"","description":"","excerpt":"","ref":"/scribbles/","tags":"","title":"Scribbles"},{"body":"This section provides help that applies to multiple operating systems and contexts, including:\nServer-based versions of Unix, such as FreeBSD Linux distributions, like Debian, RedHat, and Raspberry Pi OS Various command-line consoles, including Mac Terminal, Git Bash, and Windows Subsystem for Linux (WSL). ","categories":"","description":"Tips and reminders that apply to Unix and similar operating systems.","excerpt":"Tips and reminders that apply to Unix and similar operating systems.","ref":"/tips/unix/","tags":"","title":"Unix general tips"},{"body":"Here is a quick cheat sheet for the vi text editor:\nThere are two modes: Command and Insert.\nThe word INSERT appears in the bottom left corner of the screen when that mode is active.\nIf you’re not sure what mode you’re in, press Esc to go into Command mode.\nTo move the cursor in command mode:\nH (left) J (right) K (up) L (right) Press I to activate Insert mode.\nWhen finished, go to Command mode and then type:\n:wd to save :q! to discard changes Background Like the Spanish Inquisition, the vi editor shows up unexpectedly. I’ve seen it appear when:\nHaving to resolve merge conflicts in git Working with console windows in cloud environments Because I don’t normally use the editor, I tend to forget how to save changes and close it.\nVital statistics Last update: 12 May 20224: Refactored for the new site. First post: 21 September 2017 ","categories":"","description":"A quick cheat sheet for the vi editor","excerpt":"A quick cheat sheet for the vi editor","ref":"/tips/unix/vi-cheat-sheet/","tags":"","title":"Vi editor cheat sheet"},{"body":"This section collects tidbits related to Microsoft Windows.\nAssorted links and utilities These links are things I need from time to time. Your interests may vary:\nCreate directory tree on Windows (SuperUser)\nReset Windows XP admin password (I have more than a few older PCs.)\nScreensaver source code, for those times when you feel like recreating older OS experiences.\nSychronize files between directories (FreeFileSync)\nWindows 8.x: Make a bootable flash drive\nWindows keyboard shortcuts as supported by the Slim X1 bluetooth keyboard\n(Links do not imply endorsement or encouragement.)\nArticles ","categories":"","description":"Microsoft Windows tips and administration help.","excerpt":"Microsoft Windows tips and administration help.","ref":"/tips/windows/","tags":"","title":"Windows and related topics"},{"body":"This is the personal site for Lance Leonard, a technical writer, programmer, creative problem solver, and cat herder currently operating somewhere in the vicinity of Seattle, WA USA.\nThe site is part portfolio, part personal knowledgebase, and part…well, whatever you can get out of it.\nContact info: LinkedIn | Mastodon\nDisclaimer Opinions and ideas expressed on this site are my own and do not necessarily reflect the views of my employer, family, friends, or anyone able to rub two synapses together.\nInformation is provided as-is with no guarantee as to accuracy, completeness, fitness of purpose, etc, and so on.\nI warrant only that it worked on my devices well enough to write up. I’ve tried to draw conclusions based on reproducible results and verifiable sources. I do make mistakes and I’ve been known to be wrong.\nRemember, though: information on the Internet grows stale over time. Your mileage may, and perhaps should, vary. If it does, that’s your own lookout. Burn after reading; the Secretary disavows all knowledge.\n(If you find a typo or technical error, please let me know.\nMy response will likely depend on my ability to replicate your findings, your level of professionalism/courtesy, the phase of the moon, and other secret ingredients unlikely to be revealed at the moment.)\nVital statistics Updates 6 May 2024: Reviewed \u0026 updated for site revamp 1 June 2018: Minor edits 26 January 2017: original post ","categories":"","description":"","excerpt":"This is the personal site for Lance Leonard, a technical writer, …","ref":"/about/","tags":"","title":"About the Site"},{"body":" 13 May 2024: Migration review \u0026 cleanup\nMany typos fixed. (Many typos.) Added Style guides to Docs section. Added Email privacy error to Git section. Add post describing the Initial migration experience to Scribbles 10 May 2024: Site migrated to new look \u0026 layout.\n7 May 2024: Internal preview and progress sync\n1 May 2024: Begin converting the site to Hugo.\nSeveral driving reasons, including:\nCreate and present a more professional portfolio of writing samples Share knowledge Simplify site maintenance Experiment with new features/tools Demonstrate technical expertise beyond writing To learn more, see Restarting the engines.\n","categories":"","description":"Change happens.  Here's what's happened here recently.","excerpt":"Change happens.  Here's what's happened here recently.","ref":"/about/changelog/","tags":"","title":"Changelog"},{"body":"Here is a list of terms and idioms used on the site.\nPull request (PR) Pull requests (PRs) are groups of changes to be checked in to a git-based repository. While working on a git project, you save changes by commiting them to the project.\nWhen you complete a task or set of related changes, you package them into a pull request so they can be merged into the project.\n","categories":"","description":"","excerpt":"Here is a list of terms and idioms used on the site.\nPull request (PR) …","ref":"/tips/glossary/","tags":"","title":"Glossary"},{"body":"The site has been been updated to a new look. It has more content and a more professional pipeline.\nI have to admit that I was a little worried when starting the migration process, even though I’ve been working with (or near) the new toolset for some time.\nPart of my nervousness stems from earlier experiences, which have included some rather…dramatic results.\nNo matter how well you plan, something always seems to go sideways. And, truth be told, there were a couple of glitches along the way. (Fortunately, I noticed and resolved things quickly.)\nThe new site is built using Hugo in conjunction with the Docsy theme. It’s deployed using Github pages, which should be fine for the amount of traffic I get. (I do have a scaling plan in case things blow up, but I highly doubt that’s going to happen.)\nContent is maintained in a private repo and updates are synchronized to a public repo. (I plan to write a couple of articles walking through the process.)\nThis approach and architecture is meant to show what you can accomplish with minimal investment. Except for domain registration, the site currently relies on free services.\nA number of companies take similar approaches for their docs. Microsoft, for example, maintains private and public repos for Microsoft Learn, their doc site. They get the benefit of public contributions while securing product release plans until they’re ready to be unveiled.\nSo how long did this makeover take? Roughly ten days from start to finish:\nA prototype was “publishable” in three days.\nGranted, I wouldn’t have wanted to publish that version, but I could have if pressed.\nThe following week was spent testing, tweaking, and refining.\nThis included reworking previous articles, adding support material, and writing new articles.\nThe actual site migration took about 30 minutes overall.\nTiming started with adding a notice to the previous version of the site, just in case things went terribly wrong.\nI considered migration complete when the public URLs were updated.\nMigration was handled carefully. Each step was tested and verified.\nThis helps identify a few issues ad I’ve filed tickets accordingly. (Yes, I have a private Jira project to track work for the site.)\nI think the new site works at least as well as the earlier one. That may seem like a modest win (table stakes, some would say). And, yet…how many times have we seen larger projects stumble because of less attention to detail?\nSo here we are. Is the site everything I imagined? Not entirely. But, I think it is an improvement and it sets a solid foundation for additional work.\nWith luck, the next major update will happen within days. And, with more luck (and diligence), that will only be the beginning.\nQapla'!\n","categories":"","description":"The site has been successfully updated\n","excerpt":"The site has been successfully updated\n","ref":"/scribbles/journal/initial-migration/","tags":"","title":"Initial migration complete"},{"body":"Welcome back to the ongoing work-in-progress. I’m blowing off the dust, sweeping away the cobwebs, and setting up a new set of things.\nThis site serves as a practical portfolio and personal knowledgebase. It provides writing samples and to illustrates my approach to technical writing. It share knowledge and lessons learned during my technical adventures.\nI hope the content is engaging, practical, and has at least a bit of value. (I’m still trying to chase down the various typos, so you’ll have to forgive a few rough edges.)\nThe initial version of the site was built using MKDocs, a static site generator used to create websites from Markdown. The generated results were published using Github Pages.\nThe new version uses Hugo, which I find to be a bit more capable and extensible than MkDocs. (That’s a personal opinion; your mileage may vary.)\nThis post marks the beginning of the new journey. I’m using this to learn a new theme and to refine my technical skills/knowledge.\nInitially, I plan to mine my personal notes for content. I’m also working on backend improvements to improve discoverability, reduce maintenance, and so on.\nFuture posts will discuss various aspects of the process. For now, I’m working on the general site structure and initial content.\nThanks for joining me on this journey. Hail and well met!\n","categories":"","description":"This post kicks off a new version of the site and lays out the whats and the wherefores.\n","excerpt":"This post kicks off a new version of the site and lays out the whats …","ref":"/scribbles/journal/restart-engines/","tags":"","title":"Restart the engines"},{"body":"Choose your greeting:\nHail and well met! Greetings, lifeform. Goooood Eeeeevvvening. Hello troubleshooter. Buh-doop beep? BLAAAT! Oh. It’s you. It’s been a looong time. How’ve you been? After many promises, multiple unfinished prototypes, and much pondering, it’s finally online. The site, I mean.\nHere, you’ll find technical articles and posts related to things I’m working on, lessons I’ve learned, solutions I’ve found, and other thoughts I thought worth sharing.\nFeel free to browse, but I do ask that shenanigans be kept to a minimum…unless, of course, I’m allowed to be rambunctious as well. In that event, well, it’s off to the races… (off to the races…)\nSee About for the rules (such as they are).\nThings are a bit sparse at the moment, but that’s because I’m still pulling things together.\nFor the near future, I’m keeping it simple. Eventually, I’ll need to complicate things a bit, but hopefully not too much.\nIn Scribbles, I generally follow a light, bloggy style…except when I don’t.\nFormal articles appear in Tips. Yes, there’s a marked style difference, by design. Navigation shortcuts, search, and other traditional features are being added over time.\nComments are not currently enabled, so you’ll need to provide feedback one of the contact points on the about page. All well-intentioned feedback is appreciated.\nIf you find anything useful, feel free to share and enjoy (share and enjoy). Please give credit where credit is due. You may not pinch and poach. If something’s useful, cite where you found it.\nIf you feel I’ve not cited things correctly, let me know so I can take appropriate action.\nThings are a bit of a mess at the moment, but the style will settle down and start telling you things you need to know. I hope.\n","categories":"","description":"Hello, welcome!  Choose your greeting and learn what's going on.","excerpt":"Hello, welcome!  Choose your greeting and learn what's going on.","ref":"/scribbles/journal/first-post/","tags":"","title":"First post: Don't panic"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tips/web/css/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/tips/web/html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":" Tips Now showing tips for: Docs JavaScript Git Windows More soon! Scribbles Scribbles are posts with news, commentary, \u0026 other random thoughts. Recently posted:\n10 May: Initial migration complete 1 May: Restarting the engines Updates on the way... Also, see: About and Changelog\n","categories":"","description":"A personal portfolio and technical knowledgebase","excerpt":"A personal portfolio and technical knowledgebase","ref":"/","tags":"","title":"Lance's Quips \u0026 Quibbles"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"Here, you’ll find things neatly fit elsewhere.\nLike everything else on the site, they’re provided as-is. Interest will likely vary, based on who you are and what you’re into.\n","categories":"","description":"","excerpt":"Here, you’ll find things neatly fit elsewhere.\nLike everything else on …","ref":"/scribbles/trifles/","tags":"","title":"Trifles and Tidbits"}]